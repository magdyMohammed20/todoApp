{"version":3,"sources":["Componets/ShowItems/ShowItems.js","Componets/AddItems/AddItems.js","App.js","serviceWorker.js","index.js"],"names":["ShowItems","props","items","deleteItem","listItems","map","item","key","id","name","age","onClick","className","AddItems","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","addItem","alert","onSubmit","this","type","placeholder","onChange","Component","App","filter","Math","random","push","length","colSpan","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qOAqBeA,G,MAnBG,SAAAC,GAAS,IAElBC,EAAsBD,EAAtBC,MAAQC,EAAcF,EAAdE,WACTC,EAAYF,EAAMG,KAAI,SAAAC,GAC1B,OAAO,kBAAC,WAAD,CAAUC,IAAKD,EAAKE,IACzB,4BACE,4BAAKF,EAAKG,MACV,4BAAKH,EAAKI,KACV,4BAAI,4BAAQC,QAAS,kBAAIR,EAAWG,EAAKE,KAAKI,UAAU,UAApD,cAIV,OACE,kBAAC,WAAD,KACGR,K,OC2BQS,E,2MAxCbC,MAAM,CACJL,KAAM,GACNC,IAAI,I,EAGNK,aAAe,SAACC,GACd,EAAKC,SAAL,eAEGD,EAAEE,OAAOV,GAAM,CAACQ,EAAEE,OAAOC,U,EAI9BC,aAAe,SAACJ,GACdA,EAAEK,iBAEqB,KAApB,EAAKP,MAAML,MAAkC,KAAnB,EAAKK,MAAMJ,IACtC,EAAKT,MAAMqB,QAAQ,EAAKR,OAExBS,MAAM,oCAIR,EAAKN,SAAS,CACZR,KAAM,GACNC,IAAK,M,wEAIP,OACE,6BACE,0BAAMc,SAAUC,KAAKL,cACnB,2BAAOM,KAAK,OAAOlB,GAAG,OAAOmB,YAAY,eAAeC,SAAUH,KAAKV,aAAcI,MAAOM,KAAKX,MAAML,OACvG,2BAAOiB,KAAK,SAASlB,GAAG,MAAMmB,YAAY,cAAcC,SAAUH,KAAKV,aAAcI,MAAOM,KAAKX,MAAMJ,MACvG,2BAAOgB,KAAK,iB,GAlCCG,aC6ERC,E,2MAzEbhB,MAAM,CACJZ,MAAM,CACJ,CAACM,GAAI,EAAIC,KAAM,QAAUC,IAAM,IAC/B,CAACF,GAAI,EAAIC,KAAM,WAAaC,IAAM,IAClC,CAACF,GAAI,EAAIC,KAAM,MAAQC,IAAM,M,EAIjCP,WAAa,SAAAK,GAaX,IACMuB,EADQ,EAAKjB,MAAMZ,MACJ6B,QAAO,SAAAzB,GAAI,OAAIA,EAAKE,KAAOA,KAChD,EAAKS,SAAS,CACZf,MAAO6B,K,EAOXT,QAAU,SAAChB,GACTA,EAAKE,GAAKwB,KAAKC,SACf,IAAM/B,EAAQ,EAAKY,MAAMZ,MACzBA,EAAMgC,KAAK5B,GAEX,EAAKW,SAAS,CACZf,W,wEAKF,OAAO,6BACL,+BACE,+BACE,4BACE,oCACA,mCACA,wCAGJ,+BAEIuB,KAAKX,MAAMZ,MAAMiC,OAAS,EAExB,kBAAC,EAAD,CAAWjC,MAAOuB,KAAKX,MAAMZ,MAAOC,WAAYsB,KAAKtB,aAEvD,wBAAIS,UAAU,YACZ,wBAAIwB,QAAQ,KAAZ,+BAIN,+BACE,4BACE,wBAAIA,QAAQ,KAAI,kBAAC,EAAD,CAAUd,QAASG,KAAKH,mB,GAjElCO,aCOEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.8b64bff1.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\n\r\nconst ShowItems = props =>{\r\n\r\n  const {items , deleteItem} = props;\r\n  const listItems = items.map(item => {\r\n    return <Fragment key={item.id}>\r\n      <tr>\r\n        <td>{item.name}</td>\r\n        <td>{item.age}</td>\r\n        <td><button onClick={()=>deleteItem(item.id)} className='delete'>&times;</button></td>\r\n      </tr>\r\n    </Fragment>\r\n  })\r\n  return (\r\n    <Fragment>\r\n      {listItems}\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default ShowItems;","import React, { Component } from 'react';\r\n\r\nclass AddItems extends Component {\r\n  state={\r\n    name: '',\r\n    age:''\r\n  }\r\n  \r\n  handleChange = (e) =>{\r\n    this.setState({\r\n      // For Know Any Field Is Change\r\n      [e.target.id] : [e.target.value]\r\n    })\r\n  }\r\n\r\n  handleSubmit = (e) =>{\r\n    e.preventDefault();\r\n    // Pass The Current State To App.js For Add Element\r\n    if(this.state.name !== '' && this.state.age !== ''){\r\n      this.props.addItem(this.state)\r\n    }else{\r\n      alert('Enter The Name And Age Please !!')\r\n    }\r\n\r\n    // For Clear Inputs Previous Values After Adding \r\n    this.setState({\r\n      name: '',\r\n      age: ''\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <input type='text' id='name' placeholder='Enter Name..' onChange={this.handleChange} value={this.state.name}/>\r\n          <input type='number' id='age' placeholder='Enter Age..' onChange={this.handleChange} value={this.state.age}/>\r\n          <input type='submit'/>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddItems;","import React,{Component} from 'react';\r\nimport './App.css';\r\nimport ShowItems from './Componets/ShowItems/ShowItems'\r\nimport AddItems from './Componets/AddItems/AddItems'\r\n\r\nclass App extends Component{\r\n  state={\r\n    items:[\r\n      {id: 1 , name: 'magdy' , age : 20},\r\n      {id: 2 , name: 'mohammed' , age : 22},\r\n      {id: 3 , name: 'ali' , age : 23}\r\n    ]\r\n  }\r\n\r\n  deleteItem = id =>{\r\n\r\n    // First Way Of Removing Element From Array\r\n    /*\r\n    const items = this.state.items;\r\n    const indexOfDeleted = items.findIndex(item=> item.id == id);\r\n    items.splice(indexOfDeleted , 1)\r\n    this.setState({\r\n      items\r\n    })\r\n    */\r\n\r\n    // Second Way Of Removing Element From Array\r\n    const items = this.state.items;\r\n    const filter = items.filter(item => item.id !== id)\r\n    this.setState({\r\n      items: filter\r\n    })\r\n\r\n\r\n  }\r\n\r\n\r\n  addItem = (item) =>{\r\n    item.id = Math.random() // Generate Id For Every New Item\r\n    const items = this.state.items;\r\n    items.push(item);\r\n\r\n    this.setState({\r\n      items\r\n    })\r\n  }\r\n\r\n  render(){\r\n    return <div>\r\n      <table>\r\n        <thead>\r\n          <tr >\r\n            <td>Name</td>\r\n            <td>Age</td>\r\n            <td>Action</td>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {\r\n            this.state.items.length > 0 ? (\r\n\r\n              <ShowItems items={this.state.items} deleteItem={this.deleteItem}/>\r\n            ):\r\n            <tr className='NotFound'>\r\n              <td colSpan='3'>There Is No Items To Show</td>\r\n            </tr>\r\n          }\r\n        </tbody>\r\n        <tfoot>\r\n          <tr>\r\n            <td colSpan='3'><AddItems addItem={this.addItem}/></td>\r\n          </tr>\r\n        </tfoot>\r\n      </table>\r\n      \r\n    </div>\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}